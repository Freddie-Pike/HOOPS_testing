{"version":3,"sources":["../external \"Communicator\"","assets/microengine.scs","assets/ts3d_logo.png","components/viewer-component.js","operators/measure_operator.js","operators/select_operator.js","components/model-tree-component.js","App.js","index.js"],"names":["module","exports","Communicator","ViewerComponent","props","viewerId","uuidv4","hwv","WebViewer","containerId","this","endpointUri","modelUri","setCallbacks","sceneReady","view","setBackgroundColor","Color","white","start","window","addEventListener","resizeCanvas","hwvReady","className","id","Component","MeasureOperator","_hwv","_activeIndication","event","config","PickConfig","SelectionMask","Face","Line","selectionManager","clear","pickFromPoint","getPosition","then","selectionItem","getNodeId","position","markupManager","DistanceMarkup","model","getNodeUnitMultiplier","registerMarkup","point2","finalize","refreshMarkup","point","unit","point1","_unit","_isFinalized","circle","Markup","Shape","Circle","point3d","projectPoint","set","Point2","fromPoint3","getRenderer","drawCircle","line","point3d1","point3d2","setP1","setP2","setStrokeWidth","drawLine","midpoint","Point3","x","y","z","length","subtract","text","Text","toFixed","setFillColor","red","drawText","MarkupItem","SelectOperator","selection","ModelTreeComponent","updateItemList","bind","rootNodeId","getAbsoluteRootNode","itemList","nodeId","setSelect","selectionArray","selectionEvents","key","forEach","selectionEvent","getSelection","treeItemComponent","level","ModelTreeItemComponent","selectClick","collapseClick","childrenId","nodeName","state","isSelected","isCollapsed","getNodeType","NodeType","Part","PartInstance","BodyInstance","AssemblyNode","getNodeName","getNodeChildren","setState","selectPart","paddingStyle","paddingLeft","marginBottom","childrenItems","map","childId","caretClass","selectionClass","Fragment","style","onClick","App","changeTab","changeOperator","selectOperatorId","measureOperatorId","currentTab","cameraStatus","operator","isStructureReady","newHWV","selectOperator","registerCustomOperator","measureOperator","getCamera","toJson","modelStructureReady","camera","target","value","operatorManager","push","OperatorId","Orbit","AreaSelect","newTab","navItem","content","type","cameraStatusContent","up","width","height","projection","nearLimit","homeTabContent","onChange","modelStructureTabContent","microengine","src","logo","maxHeight","alt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.72b9e4a2.chunk.js","sourcesContent":["module.exports = Communicator;","export default __webpack_public_path__ + \"static/media/microengine.13206977.scs\";","export default __webpack_public_path__ + \"static/media/ts3d_logo.e5dcf0a8.png\";","import { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport Communicator from 'communicator';\n\n/// props\n/// modelUri: Uri to the model\n/// hwvReady(hwv): Function to call when hwv is ready\nclass ViewerComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.viewerId = uuidv4();\n    }\n\n    componentDidMount() {\n        const hwv = new Communicator.WebViewer({\n            containerId: this.viewerId,\n            endpointUri: this.props.modelUri,\n        });\n        hwv.setCallbacks({\n            sceneReady: () => {\n                hwv.view.setBackgroundColor(Communicator.Color.white(), Communicator.Color.white());\n            },\n        });\n        hwv.start();\n        window.addEventListener('resize', () => {\n            hwv.resizeCanvas();\n        });\n        this.props.hwvReady(hwv);\n    }\n\n    render() {\n        return (\n          <div className=\"bg-light w-100 h-100 position-relative\" id={this.viewerId}></div>\n        );\n    }\n}\n\nexport default ViewerComponent;","import Communicator from 'communicator';\n\nclass MeasureOperator {\n    constructor(hwv) {\n        this._hwv = hwv;\n        this._activeIndication = null;\n    }\n\n    onMouseDown(event) {\n        var config = new Communicator.PickConfig(Communicator.SelectionMask.Face | Communicator.SelectionMask.Line);\n        this._hwv.selectionManager.clear();\n\n        this._hwv.view.pickFromPoint(event.getPosition(), config).then((selectionItem) => {\n            if (selectionItem.getNodeId() !== null) {\n                var position = selectionItem.getPosition();\n                var markupManager = this._hwv.markupManager;\n\n                if (this._activeIndication === null) {\n                    this._activeIndication = new DistanceMarkup(\n                        this._hwv,\n                        position,\n                        this._hwv.model.getNodeUnitMultiplier(selectionItem.getNodeId()));\n                    markupManager.registerMarkup(this._activeIndication);\n                } else {\n                    this._activeIndication.point2 = position;\n                    this._activeIndication.finalize();\n                    this._activeIndication = null;\n                }\n            }\n        });\n    }\n\n    onMouseMove(event) {\n        if (this._activeIndication === null) {\n            return;\n        }\n        var config = new Communicator.PickConfig(Communicator.SelectionMask.Face | Communicator.SelectionMask.Line);\n        this._hwv.selectionManager.clear();\n        this._hwv.view.pickFromPoint(event.getPosition(), config).then((selectionItem) => {\n            if (selectionItem.getNodeId() !== null) {\n                var position = selectionItem.getPosition();\n                this._activeIndication.point2 = position;\n                this._hwv.markupManager.refreshMarkup();\n            }\n        });\n    }\n}\n\nclass DistanceMarkup extends Communicator.Markup.MarkupItem {\n    constructor(hwv, point, unit) {\n        super();\n        this._hwv = hwv;\n        this.point1 = point;\n        this.point2 = null;\n        this._unit = unit;\n        this._isFinalized = false;\n    }\n\n    draw() {\n        // Draw at the 'click' locations\n        var view = this._hwv.view;\n        if (this.point1 !== null) {\n            // draw the first point\n            var circle = new Communicator.Markup.Shape.Circle();\n            var point3d = view.projectPoint(this.point1);\n            circle.set(Communicator.Point2.fromPoint3(point3d), 2.0);\n            this._hwv.markupManager.getRenderer().drawCircle(circle);\n\n            if (this.point2 !== null) {\n                // draw the second point\n                point3d = view.projectPoint(this.point2);\n                circle.set(Communicator.Point2.fromPoint3(point3d), 2.0);\n                this._hwv.markupManager.getRenderer().drawCircle(circle);\n\n                // draw a line between the points\n                var line = new Communicator.Markup.Shape.Line();\n                var point3d1 = view.projectPoint(this.point1);\n                var point3d2 = view.projectPoint(this.point2);\n                line.setP1(Communicator.Point2.fromPoint3(point3d1));\n                line.setP2(Communicator.Point2.fromPoint3(point3d2));\n                if (!this._isFinalized) {\n                    line.setStrokeWidth(5);\n                }\n                this._hwv.markupManager.getRenderer().drawLine(line);\n\n                // add a label\n                var midpoint = new Communicator.Point3((point3d1.x + point3d2.x) / 2, (point3d1.y + point3d2.y) / 2, (point3d1.z + point3d2.z) / 2);\n                var length = Communicator.Point3.subtract(this.point2, this.point1).length() * this._unit;\n\n                var text = new Communicator.Markup.Shape.Text(\n                    length.toFixed(2) + \"mm\",\n                    Communicator.Point2.fromPoint3(midpoint));\n                text.setFillColor(Communicator.Color.red());\n                this._hwv.markupManager.getRenderer().drawText(text);\n            }\n        }\n    }\n\n    finalize() {\n        this._isFinalized = true;\n        this._hwv.markupManager.refreshMarkup();\n    }\n}\n\nexport default MeasureOperator;","import Communicator from 'communicator';\n\nclass SelectOperator {\n    constructor(hwv) {\n        this._hwv = hwv;\n    }\n\n    onMouseDown(event) {\n        var config = new Communicator.PickConfig(Communicator.SelectionMask.Face | Communicator.SelectionMask.Line);\n        this._hwv.selectionManager.clear();\n        this._hwv.view.pickFromPoint(event.getPosition(), config).then((selection) => {\n            if (selection.getNodeId() != null) {\n                this._hwv.selectionManager.set(selection);\n            }\n        });\n    }\n}\n\nexport default SelectOperator;","import React, { Component } from \"react\";\nimport Communicator from 'communicator';\nimport '../styles/caret.css';\n\n/// props\n/// hwv: The web viewer\nclass ModelTreeComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.updateItemList = this.updateItemList.bind(this);\n    this.rootNodeId = this.props.hwv.model.getAbsoluteRootNode();\n    this.itemList = {};  // A record of all the items in this tree\n  }\n\n  componentDidMount() {\n    for (const nodeId in this.itemList) {\n      this.itemList[nodeId].setSelect(false);\n    }\n    this.props.hwv.setCallbacks({\n      // Selection event from the web viewer\n      selectionArray: (selectionEvents) => {\n        for (const key in this.itemList) {\n          this.itemList[key].setSelect(false);\n        }\n        selectionEvents.forEach(selectionEvent => {\n          const nodeId = selectionEvent.getSelection().getNodeId();\n          this.itemList[nodeId].setSelect(true);\n        });\n      },\n    });\n  }\n\n  updateItemList(nodeId, treeItemComponent) {\n    this.itemList[nodeId] = treeItemComponent;\n  }\n\n  render() {\n    return (\n      <div className=\"list-group\">\n        <div className=\"d-none\"></div>\n        <ModelTreeItemComponent hwv={this.props.hwv} nodeId={this.rootNodeId} level={0} updateItemList={this.updateItemList}></ModelTreeItemComponent>\n      </div>\n    );\n  }\n}\n\n/// props\n/// hwv: The web viewer\n/// nodeId: ID of the model node\n/// level: Depth in the tree\n/// updateItemList: callback to update the record of items\nclass ModelTreeItemComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.setSelect = this.setSelect.bind(this);\n    this.selectClick = this.selectClick.bind(this);\n    this.collapseClick = this.collapseClick.bind(this);\n    this.childrenId = [];\n    this.nodeName = \"\";\n    this.state = {\n      isSelected: false,\n      isCollapsed: false,\n    };\n\n    switch (this.props.hwv.model.getNodeType(this.props.nodeId)) {\n      case Communicator.NodeType.Part:\n      case Communicator.NodeType.PartInstance:\n      case Communicator.NodeType.BodyInstance:\n      case Communicator.NodeType.AssemblyNode: {\n        this.nodeName = this.props.hwv.model.getNodeName(this.props.nodeId);\n        this.childrenId = this.props.hwv.model.getNodeChildren(this.props.nodeId);\n        this.props.updateItemList(this.props.nodeId, this);\n        break;\n      }\n      default:\n        break;\n    }\n  }\n\n  setSelect(isSelected) {\n    this.setState({\n      isSelected: isSelected,\n    });\n  }\n\n  selectClick(event) {\n    this.props.hwv.selectPart(\n      !this.state.isSelected ? this.props.nodeId : null\n    );\n  }\n\n  collapseClick(event) {\n    this.setState({\n      isCollapsed: !this.state.isCollapsed,\n    });\n  }\n\n  render() {\n    const paddingStyle = {\n      paddingLeft: this.props.level * 20 + 10,\n      marginBottom: -1,\n    };\n    const childrenItems = this.childrenId.map(childId => {\n      return <ModelTreeItemComponent key={childId}\n        hwv={this.props.hwv}\n        nodeId={childId}\n        level={this.props.level + 1}\n        updateItemList={this.props.updateItemList}>\n      </ModelTreeItemComponent>;\n    });\n    // Styles\n    const caretClass =\n      (this.childrenId.length > 0 ? 'caret ' : '') +\n      (this.state.isCollapsed ? '' : 'caret-down');\n    const selectionClass = \n      this.state.isSelected ? 'bg-primary text-white ' : '';\n    return (\n      <React.Fragment>\n        <div className={'list-group-item list-group-item-action d-flex py-1 ' + selectionClass} style={paddingStyle}>\n          <div className={'py-1 ' + caretClass} onClick={this.collapseClick}></div>\n          <div className=\"py-1 flex-fill cursor-pointer user-select-none\" onClick={this.selectClick}>{this.nodeName}</div>\n        </div>\n        <div className={this.state.isCollapsed ? 'd-none' : ''}>{childrenItems}</div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ModelTreeComponent;","import { Component } from 'react';\nimport './App.css';\nimport microengine from './assets/microengine.scs';\nimport logo from './assets/ts3d_logo.png';\nimport ViewerComponent from './components/viewer-component';\nimport Communicator from 'communicator';\nimport MeasureOperator from './operators/measure_operator';\nimport SelectOperator from './operators/select_operator';\nimport ModelTreeComponent from './components/model-tree-component';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    // Functions\n    this.hwvReady = this.hwvReady.bind(this);\n    this.changeTab = this.changeTab.bind(this);\n    this.changeOperator = this.changeOperator.bind(this);\n    // Custom Operators\n    this.selectOperatorId = null;\n    this.measureOperatorId = null;\n    // State\n    this.state = {\n      hwv: null,\n      currentTab: 2, // 1: Home, 2: ModelTree\n      cameraStatus: null,\n      operator: 'Orbit',\n      isStructureReady: false,\n    };\n  }\n\n  // Callback when the new hwv is ready\n  hwvReady(newHWV) {\n    // Custom Select Operator\n    let selectOperator = new SelectOperator(newHWV);\n    this.selectOperatorId = newHWV.registerCustomOperator(selectOperator);\n    // Custom Measure Operator\n    let measureOperator = new MeasureOperator(newHWV);\n    this.measureOperatorId = newHWV.registerCustomOperator(measureOperator);\n\n    this.setState({\n      hwv: newHWV,\n    }, () => {\n      this.state.hwv.setCallbacks({\n        sceneReady: () => {\n          this.setState({\n            cameraStatus: this.state.hwv.view.getCamera().toJson(),\n          });\n        },\n        modelStructureReady: () => {\n          this.setState({\n            isStructureReady: true,\n          });\n        },\n        camera: () => {\n          this.setState({\n            cameraStatus: this.state.hwv.view.getCamera().toJson(),\n          });\n        }\n      });\n    });\n  }\n\n  changeOperator(event) {\n    this.setState({\n      operator: event.target.value,\n    }, () => {\n      if (!this.state.hwv) return;\n      this.state.hwv.operatorManager.clear();\n      this.state.hwv.operatorManager.push(Communicator.OperatorId.Orbit);\n      if (this.state.operator === \"Area Select\") {\n        this.state.hwv.operatorManager.push(Communicator.OperatorId.AreaSelect);\n      } else if (this.state.operator === \"Select\") {\n        this.state.hwv.operatorManager.push(this.selectOperatorId);\n      } else if (this.state.operator === \"Measure\") {\n        this.state.hwv.operatorManager.push(this.measureOperatorId);\n      }\n    });\n  }\n\n  changeTab(newTab) {\n    this.setState({\n      currentTab: newTab,\n    });\n  }\n\n  render() {\n    const navItem = (value, content) => {\n      return <li className=\"nav-item\">\n        <button\n          className={'nav-link ' + (this.state.currentTab === value ? 'active' : '')}\n          onClick={() => { this.changeTab(value) }}\n          type=\"button\">{content}</button></li>;\n    };\n    const cameraStatusContent = this.state.cameraStatus == null ? <p>Unavailable</p> :\n      <div>\n        <p className=\"mb-0\"><strong>Position:</strong>\n          {this.state.cameraStatus.position.x.toFixed(2)}, {this.state.cameraStatus.position.y.toFixed(2)}, {this.state.cameraStatus.position.z.toFixed(2)}\n        </p>\n        <p className=\"mb-0\"><strong>Target:</strong>\n          {this.state.cameraStatus.target.x.toFixed(2)}, {this.state.cameraStatus.target.y.toFixed(2)}, {this.state.cameraStatus.target.z.toFixed(2)}\n        </p>\n        <p className=\"mb-0\"><strong>Up:</strong>\n          {this.state.cameraStatus.up.x.toFixed(2)}, {this.state.cameraStatus.up.y.toFixed(2)}, {this.state.cameraStatus.up.z.toFixed(2)}\n        </p>\n        <p className=\"mb-0\">\n          <strong>Width:</strong> {this.state.cameraStatus.width.toFixed(2)} &nbsp;\n        <strong>Height:</strong> {this.state.cameraStatus.height.toFixed(2)}\n        </p>\n        <p className=\"mb-0\">\n          <strong>Projection:</strong> {this.state.cameraStatus.projection.toFixed(2)} &nbsp;\n        <strong>NearLimit:</strong> {this.state.cameraStatus.nearLimit.toFixed(2)}\n        </p>\n        <p className=\"mb-0\"><strong>Class Name:</strong> {this.state.cameraStatus.className}</p>\n      </div>;\n    const homeTabContent = <div className={'tab-pane fade show ' + (this.state.currentTab === 1 ? 'active' : '')}>\n      <h2>React Demo for Hoops Web Platform</h2>\n      {/* Operator Selection */}\n      <h5>Operator</h5>\n      <select className=\"form-select mb-3\" value={this.state.operator} onChange={this.changeOperator}>\n        <option value=\"Orbit\">Orbit</option>\n        <option value=\"Area Select\">Area Select</option>\n        <option value=\"Select\">Select</option>\n        <option value=\"Measure\">Measure</option>\n      </select>\n      {/* Camera Status */}\n      <h5>Camera Status</h5>\n      {cameraStatusContent}\n    </div>;\n    const modelStructureTabContent = <div className={'tab-pane fade show ' + (this.state.currentTab === 2 ? 'active' : '')}>\n      <h5>Model Structure</h5>\n      {\n        this.state.isStructureReady\n          ? <ModelTreeComponent hwv={this.state.hwv}></ModelTreeComponent>\n          : <p>Model structure is not ready</p>\n      }\n    </div>;\n\n    return (\n      <div className=\"container-fluid p-0 m-0\">\n        <div className=\"row p-0 m-0\" style={{ height: \"100vh\" }}>\n          {/* HWP WebViewer with Custom Component */}\n          <div className=\"col-6 p-0 m-0 border-end\">\n            <ViewerComponent modelUri={microengine} hwvReady={this.hwvReady}></ViewerComponent>\n          </div>\n          {/* Control panel on the right side */}\n          <div className=\"col-6 p-0 m-0 overflow-scroll\" style={{ height: \"100vh\" }}>\n            {/* Logo */}\n            <img src={logo} className=\"img-fluid m-3\" style={{ maxHeight: \"100px\" }} alt=\"TechSoft 3D LOGO\"></img>\n            {/* NavBar */}\n            <ul className=\"nav nav-tabs px-3\">\n              {navItem(1, \"Home\")}\n              {navItem(2, \"ModelStructure\")}\n            </ul>\n            {/* Tab Contents */}\n            <div className=\"tab-content p-3\">\n              {homeTabContent}{modelStructureTabContent}\n            </div > {/* Tab Contents End */}\n          </div > {/* Right Panel End */}\n        </div > {/* Row End */}\n      </div >\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}